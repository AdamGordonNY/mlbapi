// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma

model RosterUpdates {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  updateId Int    @unique
  name     String
}

model RosterUpdateDetails {
  id               String                    @id @default(auto()) @map("_id") @db.ObjectId
  rosterUpdatesId  String                    @db.ObjectId
  attributeChanges RosterUpdateDetailsItem[]
}

model RosterUpdateDetailsItem {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  rosterUpdateDetailsId String              @db.ObjectId
  itemId                String              @db.ObjectId
  rosterUpdateDetails   RosterUpdateDetails @relation(fields: [rosterUpdateDetailsId], references: [id], onDelete: Cascade)
  item                  Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([rosterUpdateDetailsId, itemId])
}

model Item {
  id                          String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid                        String   @unique
  name                        String
  rarity                      String
  team                        String
  ovr                         Int?
  age                         Int?
  height                      String?
  weight                      String?
  born                        String?
  display_position            String?
  display_secondary_positions String?
  series_year                 Int?
  baked_img                   String?
  img                         String?
  batHand                     String?
  throwHand                   String?
  isHitter                    Boolean?
  series                      String?

  contactLeft           Int?
  contactRight          Int?
  powerLeft             Int?
  powerRight            Int?
  plateVision           Int?
  plateDiscipline       Int?
  battingClutch         Int?
  buntingAbility        Int?
  dragBuntingAbility    Int?
  hittingDurability     Int?
  fieldingAbility       Int?
  armStrength           Int?
  armAccuracy           Int?
  reactionTime          Int?
  blocking              Int?
  speed                 Int?
  baserunningAbility    Int?
  baserunningAggression Int?
  stamina               Int?
  pitchingClutch        Int?
  hitsPerBf             Int?
  kPerBf                Int?
  bbPerBf               Int?
  hrPerBf               Int?
  pitchVelocity         Int?
  pitchControl          Int?
  pitchMovement         Int?
  // Define a one-to-one relationship with PitcherStats

  itemQuirks               ItemQuirk[]
  itemPitches              ItemPitch[]
  rosterUpdateDetailsItems RosterUpdateDetailsItem[]
}

model Pitch {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  speed     Int
  control   Int
  movement  Int
  ItemPitch ItemPitch[]
}

model Quirk {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String
  img         String
  items       ItemQuirk[] // Indirect many-to-many relationship with Item through ItemQuirk
}

model ItemQuirk {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  itemId  String @db.ObjectId
  quirkId String @db.ObjectId
  item    Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quirk   Quirk  @relation(fields: [quirkId], references: [id], onDelete: Cascade)

  @@unique([itemId, quirkId]) // Unique constraint to prevent duplicate pairs
}

model ItemPitch {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  itemId  String @db.ObjectId
  pitchId String @db.ObjectId
  item    Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  pitch   Pitch  @relation(fields: [pitchId], references: [id], onDelete: Cascade)

  @@unique([itemId, pitchId])
}

enum Positions {
  Catcher
  FirstBase
  SecondBase
  ThirdBase
  Shortstop
  LeftField
  CenterField
  RightField
  StartingPitcher
  ReliefPitcher
  Closer
}
